Actual SWEBench dataset patch:

diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -36,6 +36,8 @@
 import pickle
 import sys
 
+import appdirs
+
 from pylint.config.configuration_mixin import ConfigurationMixIn
 from pylint.config.find_default_config_files import find_default_config_files
 from pylint.config.man_help_formatter import _ManHelpFormatter
@@ -63,7 +65,15 @@
 elif USER_HOME == "~":
     PYLINT_HOME = ".pylint.d"
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    PYLINT_HOME = appdirs.user_cache_dir("pylint")
+
+    old_home = os.path.join(USER_HOME, ".pylint.d")
+    if os.path.exists(old_home):
+        print(
+            f"PYLINTHOME is now '{PYLINT_HOME}' but obsolescent '{old_home}' is found; "
+            "you can safely remove the latter",
+            file=sys.stderr,
+        )
 
 
 def _get_pdata_path(base_name, recurs):
diff --git a/setup.cfg b/setup.cfg
index 62a3fd7a5f..146f9e69bb 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -42,6 +42,7 @@ project_urls =
 [options]
 packages = find:
 install_requires =
+    appdirs>=1.4.0
     astroid>=2.6.5,<2.7 # (You should also upgrade requirements_test_min.txt)
     isort>=4.2.5,<6
     mccabe>=0.6,<0.7
@@ -74,7 +75,7 @@ markers =
 [isort]
 multi_line_output = 3
 line_length = 88
-known_third_party = astroid, sphinx, isort, pytest, mccabe, six, toml
+known_third_party = appdirs, astroid, sphinx, isort, pytest, mccabe, six, toml
 include_trailing_comma = True
 skip_glob = tests/functional/**,tests/input/**,tests/extensions/data/**,tests/regrtest_data/**,tests/data/**,astroid/**,venv/**
 src_paths = pylint
@@ -82,6 +83,9 @@ src_paths = pylint
 [mypy]
 scripts_are_modules = True
 
+[mypy-appdirs]
+ignore_missing_imports = True
+
 [mypy-astroid.*]
 ignore_missing_imports = True
 


Actual SWEBench dataset test patch:

diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py
--- a/tests/lint/unittest_lint.py
+++ b/tests/lint/unittest_lint.py
@@ -46,6 +46,7 @@
 from os.path import abspath, basename, dirname, isdir, join, sep
 from shutil import rmtree
 
+import appdirs
 import pytest
 
 from pylint import checkers, config, exceptions, interfaces, lint, testutils
@@ -631,7 +632,7 @@ def test_pylint_home():
     if uhome == "~":
         expected = ".pylint.d"
     else:
-        expected = os.path.join(uhome, ".pylint.d")
+        expected = appdirs.user_cache_dir("pylint")
     assert config.PYLINT_HOME == expected
 
     try:


My agent solution:

diff --git a/pylint/config/__init__.py b/pylint/config/__init__.py
index 84774d0e3..7ac040b91 100644
--- a/pylint/config/__init__.py
+++ b/pylint/config/__init__.py
@@ -62,8 +62,10 @@ if "PYLINTHOME" in os.environ:
         USER_HOME = os.path.dirname(PYLINT_HOME)
 elif USER_HOME == "~":
     PYLINT_HOME = ".pylint.d"
+elif "XDG_DATA_HOME" in os.environ:
+    PYLINT_HOME = os.path.join(os.environ["XDG_DATA_HOME"], "pylint")
 else:
-    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+    PYLINT_HOME = os.path.join(USER_HOME, ".local", "share", "pylint")
 
 
 def _get_pdata_path(base_name, recurs):
@@ -83,7 +85,7 @@ def load_results(base):
 def save_results(results, base):
     if not os.path.exists(PYLINT_HOME):
         try:
-            os.mkdir(PYLINT_HOME)
+            os.makedirs(PYLINT_HOME, exist_ok=True)
         except OSError:
             print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
     data_file = _get_pdata_path(base, 1)
@@ -110,8 +112,8 @@ ENV_HELP = (
 The following environment variables are used:
     * PYLINTHOME
     Path to the directory where persistent data for the run will be stored. If
-not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
-directory).
+not found, it defaults to $XDG_DATA_HOME/pylint or ~/.local/share/pylint/ or
+.pylint.d (in the current working directory).
     * PYLINTRC
     Path to the configuration file. See the documentation for the method used
 to search for configuration file.
diff --git a/pylint/config/__init__.py.backup b/pylint/config/__init__.py.backup
new file mode 100644
index 000000000..84774d0e3
--- /dev/null
+++ b/pylint/config/__init__.py.backup
@@ -0,0 +1,120 @@
+# Copyright (c) 2006-2010, 2012-2014 LOGILAB S.A. (Paris, FRANCE) <contact@logilab.fr>
+# Copyright (c) 2008 pyves@crater.logilab.fr <pyves@crater.logilab.fr>
+# Copyright (c) 2013 Google, Inc.
+# Copyright (c) 2013 John McGehee <jmcgehee@altera.com>
+# Copyright (c) 2014-2020 Claudiu Popa <pcmanticore@gmail.com>
+# Copyright (c) 2014 Brett Cannon <brett@python.org>
+# Copyright (c) 2014 Arun Persaud <arun@nubati.net>
+# Copyright (c) 2015 Aru Sahni <arusahni@gmail.com>
+# Copyright (c) 2015 John Kirkham <jakirkham@gmail.com>
+# Copyright (c) 2015 Ionel Cristian Maries <contact@ionelmc.ro>
+# Copyright (c) 2016 Erik <erik.eriksson@yahoo.com>
+# Copyright (c) 2016 Alexander Todorov <atodorov@otb.bg>
+# Copyright (c) 2016 Moises Lopez <moylop260@vauxoo.com>
+# Copyright (c) 2017, 2020 hippo91 <guillaume.peillex@gmail.com>
+# Copyright (c) 2017-2019 Ville Skyttä <ville.skytta@iki.fi>
+# Copyright (c) 2017 ahirnish <ahirnish@gmail.com>
+# Copyright (c) 2017 Łukasz Rogalski <rogalski.91@gmail.com>
+# Copyright (c) 2018, 2020 Anthony Sottile <asottile@umich.edu>
+# Copyright (c) 2018 Jim Robertson <jrobertson98atx@gmail.com>
+# Copyright (c) 2018 ssolanki <sushobhitsolanki@gmail.com>
+# Copyright (c) 2018 Bryce Guinta <bryce.paul.guinta@gmail.com>
+# Copyright (c) 2018 Sushobhit <31987769+sushobhit27@users.noreply.github.com>
+# Copyright (c) 2018 Gary Tyler McLeod <mail@garytyler.com>
+# Copyright (c) 2018 Konstantin <Github@pheanex.de>
+# Copyright (c) 2018 Nick Drozd <nicholasdrozd@gmail.com>
+# Copyright (c) 2019-2021 Pierre Sassoulas <pierre.sassoulas@gmail.com>
+# Copyright (c) 2019 Janne Rönkkö <jannero@users.noreply.github.com>
+# Copyright (c) 2019 Ashley Whetter <ashley@awhetter.co.uk>
+# Copyright (c) 2019 Hugo van Kemenade <hugovk@users.noreply.github.com>
+# Copyright (c) 2021 Marc Mueller <30130371+cdce8p@users.noreply.github.com>
+
+# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
+# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
+
+import os
+import pickle
+import sys
+
+from pylint.config.configuration_mixin import ConfigurationMixIn
+from pylint.config.find_default_config_files import find_default_config_files
+from pylint.config.man_help_formatter import _ManHelpFormatter
+from pylint.config.option import Option
+from pylint.config.option_manager_mixin import OptionsManagerMixIn
+from pylint.config.option_parser import OptionParser
+from pylint.config.options_provider_mixin import OptionsProviderMixIn, UnsupportedAction
+
+__all__ = [
+    "ConfigurationMixIn",
+    "find_default_config_files",
+    "_ManHelpFormatter",
+    "Option",
+    "OptionsManagerMixIn",
+    "OptionParser",
+    "OptionsProviderMixIn",
+    "UnsupportedAction",
+]
+
+USER_HOME = os.path.expanduser("~")
+if "PYLINTHOME" in os.environ:
+    PYLINT_HOME = os.environ["PYLINTHOME"]
+    if USER_HOME == "~":
+        USER_HOME = os.path.dirname(PYLINT_HOME)
+elif USER_HOME == "~":
+    PYLINT_HOME = ".pylint.d"
+else:
+    PYLINT_HOME = os.path.join(USER_HOME, ".pylint.d")
+
+
+def _get_pdata_path(base_name, recurs):
+    base_name = base_name.replace(os.sep, "_")
+    return os.path.join(PYLINT_HOME, f"{base_name}{recurs}.stats")
+
+
+def load_results(base):
+    data_file = _get_pdata_path(base, 1)
+    try:
+        with open(data_file, "rb") as stream:
+            return pickle.load(stream)
+    except Exception:  # pylint: disable=broad-except
+        return {}
+
+
+def save_results(results, base):
+    if not os.path.exists(PYLINT_HOME):
+        try:
+            os.mkdir(PYLINT_HOME)
+        except OSError:
+            print("Unable to create directory %s" % PYLINT_HOME, file=sys.stderr)
+    data_file = _get_pdata_path(base, 1)
+    try:
+        with open(data_file, "wb") as stream:
+            pickle.dump(results, stream)
+    except OSError as ex:
+        print(f"Unable to create file {data_file}: {ex}", file=sys.stderr)
+
+
+def find_pylintrc():
+    """search the pylint rc file and return its path if it find it, else None"""
+    for config_file in find_default_config_files():
+        if config_file.endswith("pylintrc"):
+            return config_file
+
+    return None
+
+
+PYLINTRC = find_pylintrc()
+
+ENV_HELP = (
+    """
+The following environment variables are used:
+    * PYLINTHOME
+    Path to the directory where persistent data for the run will be stored. If
+not found, it defaults to ~/.pylint.d/ or .pylint.d (in the current working
+directory).
+    * PYLINTRC
+    Path to the configuration file. See the documentation for the method used
+to search for configuration file.
+"""
+    % globals()  # type: ignore
+)