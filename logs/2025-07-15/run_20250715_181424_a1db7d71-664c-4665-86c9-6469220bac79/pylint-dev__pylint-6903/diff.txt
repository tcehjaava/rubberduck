Actual SWEBench dataset patch:

diff --git a/pylint/lint/run.py b/pylint/lint/run.py
--- a/pylint/lint/run.py
+++ b/pylint/lint/run.py
@@ -58,6 +58,13 @@ def _query_cpu() -> int | None:
             cpu_shares = int(file.read().rstrip())
         # For AWS, gives correct value * 1024.
         avail_cpu = int(cpu_shares / 1024)
+
+    # In K8s Pods also a fraction of a single core could be available
+    # As multiprocessing is not able to run only a "fraction" of process
+    # assume we have 1 CPU available
+    if avail_cpu == 0:
+        avail_cpu = 1
+
     return avail_cpu
 
 


Actual SWEBench dataset test patch:

diff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py
--- a/tests/test_pylint_runners.py
+++ b/tests/test_pylint_runners.py
@@ -6,14 +6,17 @@
 from __future__ import annotations
 
 import os
+import pathlib
 import sys
 from collections.abc import Callable
-from unittest.mock import patch
+from unittest.mock import MagicMock, mock_open, patch
 
 import pytest
 from py._path.local import LocalPath  # type: ignore[import]
 
 from pylint import run_epylint, run_pylint, run_pyreverse, run_symilar
+from pylint.lint import Run
+from pylint.testutils import GenericTestReporter as Reporter
 
 
 @pytest.mark.parametrize(
@@ -40,3 +43,35 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:
         with pytest.raises(SystemExit) as err:
             runner(testargs)
         assert err.value.code == 0
+
+
+def test_pylint_run_jobs_equal_zero_dont_crash_with_cpu_fraction(
+    tmpdir: LocalPath,
+) -> None:
+    """Check that the pylint runner does not crash if `pylint.lint.run._query_cpu`
+    determines only a fraction of a CPU core to be available.
+    """
+    builtin_open = open
+
+    def _mock_open(*args, **kwargs):
+        if args[0] == "/sys/fs/cgroup/cpu/cpu.cfs_quota_us":
+            return mock_open(read_data=b"-1")(*args, **kwargs)
+        if args[0] == "/sys/fs/cgroup/cpu/cpu.shares":
+            return mock_open(read_data=b"2")(*args, **kwargs)
+        return builtin_open(*args, **kwargs)
+
+    pathlib_path = pathlib.Path
+
+    def _mock_path(*args, **kwargs):
+        if args[0] == "/sys/fs/cgroup/cpu/cpu.shares":
+            return MagicMock(is_file=lambda: True)
+        return pathlib_path(*args, **kwargs)
+
+    filepath = os.path.abspath(__file__)
+    testargs = [filepath, "--jobs=0"]
+    with tmpdir.as_cwd():
+        with pytest.raises(SystemExit) as err:
+            with patch("builtins.open", _mock_open):
+                with patch("pylint.lint.run.Path", _mock_path):
+                    Run(testargs, reporter=Reporter())
+        assert err.value.code == 0


My agent solution:

diff --git a/pylint/lint/run.py b/pylint/lint/run.py
index a7e5d5574..c90fbd1c3 100644
--- a/pylint/lint/run.py
+++ b/pylint/lint/run.py
@@ -182,7 +182,15 @@ group are mutually exclusive.",
                 )
                 linter.set_option("jobs", 1)
             elif linter.config.jobs == 0:
-                linter.config.jobs = _cpu_count()
+                cpu_count = _cpu_count()
+                if cpu_count > 0:
+                    linter.config.jobs = cpu_count
+                else:
+                    print(
+                        "Unable to determine CPU count, fallback to single process",
+                        file=sys.stderr,
+                    )
+                    linter.set_option("jobs", 1)
 
         if self._output:
             try:
diff --git a/tests/test_swe_bench_cpu_count_fix.py b/tests/test_swe_bench_cpu_count_fix.py
new file mode 100644
index 000000000..dbf05d8b3
--- /dev/null
+++ b/tests/test_swe_bench_cpu_count_fix.py
@@ -0,0 +1,99 @@
+"""Test for the SWE-bench CPU count bug fix.
+
+This test verifies that when _query_cpu() returns 0 (e.g., in Kubernetes 
+environments with cpu.shares=2), pylint doesn't crash but falls back 
+to single-threaded mode.
+"""
+import tempfile
+from io import StringIO
+from contextlib import redirect_stderr
+
+import pytest
+
+from pylint.lint.run import Run, _query_cpu
+
+
+def test_swe_bench_cpu_count_zero_fallback():
+    """Test that pylint handles _query_cpu() returning 0 gracefully."""
+    # Import here to get the updated module
+    from pylint.lint import run
+    
+    # Save original function
+    original_query_cpu = run._query_cpu
+    
+    # Mock _query_cpu to return 0 (simulating Kubernetes scenario)
+    def mock_query_cpu_zero():
+        return 0
+    
+    try:
+        run._query_cpu = mock_query_cpu_zero
+        
+        # Create a simple test file
+        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
+            f.write('print("hello")\n')
+            test_file = f.name
+        
+        # Capture stderr to check for fallback message
+        stderr_capture = StringIO()
+        with redirect_stderr(stderr_capture):
+            # This should not crash, but fall back to single process
+            runner = Run(['--jobs=0', test_file], exit=False)
+        
+        stderr_output = stderr_capture.getvalue()
+        
+        # Verify the fallback message is shown
+        assert "Unable to determine CPU count, fallback to single process" in stderr_output
+        
+        # Verify jobs is set to 1 (single-threaded)
+        assert runner.linter.config.jobs == 1
+        
+        # Verify pylint completed successfully (didn't crash)
+        # The runner should complete without raising an exception
+        
+    finally:
+        # Restore original function
+        run._query_cpu = original_query_cpu
+
+
+def test_swe_bench_multiprocessing_pool_direct():
+    """Test the direct multiprocessing.Pool issue that caused the crash."""
+    import multiprocessing
+    
+    # This should raise ValueError as described in the user's bug report
+    with pytest.raises(ValueError, match="Number of processes must be at least 1"):
+        with multiprocessing.Pool(0):
+            pass
+
+
+def test_swe_bench_cpu_count_function_behavior():
+    """Test _cpu_count() function behavior with mocked _query_cpu()."""
+    from pylint.lint import run
+    
+    # Save original function
+    original_query_cpu = run._query_cpu
+    
+    try:
+        # Test with _query_cpu returning 0
+        def mock_query_cpu_zero():
+            return 0
+        
+        run._query_cpu = mock_query_cpu_zero
+        result = run._cpu_count()
+        
+        # _cpu_count should return 0 when _query_cpu returns 0
+        # This demonstrates the problem that the fix addresses
+        assert result == 0, f"Expected 0, got {result}"
+        
+        # Test with _query_cpu returning None (normal case when no cgroup files)
+        def mock_query_cpu_none():
+            return None
+        
+        run._query_cpu = mock_query_cpu_none
+        result = run._cpu_count()
+        
+        # _cpu_count should return actual CPU count when _query_cpu returns None
+        assert result > 0, f"Expected > 0, got {result}"
+        
+    finally:
+        # Restore original function
+        run._query_cpu = original_query_cpu